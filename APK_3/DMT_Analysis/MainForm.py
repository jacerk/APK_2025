# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt6 UI code generator 6.8.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import laspy
from laspy import LazBackend
from algorithms import *
from Settings import *
from draw import Draw
from qpoint3df import QPoint3DF # Import QPoint3DF

class Ui_MainForm(object):
    def __init__(self):
        #Contour line parameters
        self.zmin = 150
        self.zmax = 1500
        self.dz = 10
        
    
    def setupUi(self, MainForm):
        MainForm.setObjectName("MainForm")
        MainForm.resize(987, 787)
        self.centralwidget = QtWidgets.QWidget(parent=MainForm)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Canvas = Draw(parent=self.centralwidget)
        self.Canvas.setObjectName("Canvas")
        self.horizontalLayout.addWidget(self.Canvas)
        MainForm.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainForm)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 987, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuView = QtWidgets.QMenu(parent=self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuAnalysis = QtWidgets.QMenu(parent=self.menubar)
        self.menuAnalysis.setObjectName("menuAnalysis")
        self.menuClear = QtWidgets.QMenu(parent=self.menubar)
        self.menuClear.setObjectName("menuClear")
        self.menuSettings = QtWidgets.QMenu(parent=self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        MainForm.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainForm)
        self.statusbar.setObjectName("statusbar")
        MainForm.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(parent=MainForm)
        self.toolBar.setObjectName("toolBar")
        MainForm.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBar)
        self.actionOpen = QtGui.QAction(parent=MainForm)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/icons/open_file.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionOpen.setIcon(icon)
        self.actionOpen.setObjectName("actionOpen")
        self.actionExit = QtGui.QAction(parent=MainForm)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/icons/exit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionExit.setIcon(icon1)
        self.actionExit.setObjectName("actionExit")
        self.actionPoints = QtGui.QAction(parent=MainForm)
        self.actionPoints.setCheckable(True)
        self.actionPoints.setObjectName("actionPoints")
        self.actionDT = QtGui.QAction(parent=MainForm)
        self.actionDT.setCheckable(True)
        self.actionDT.setObjectName("actionDT")
        
        self.actionContourLines= QtGui.QAction(parent=MainForm)
        self.actionContourLines.setCheckable(True)
        self.actionContourLines.setObjectName("actionContourLines")
        
        
        self.actionSlope = QtGui.QAction(parent=MainForm)
        self.actionSlope.setCheckable(True)
        self.actionSlope.setObjectName("actionSlope")
        self.actionAspect = QtGui.QAction(parent=MainForm)
        self.actionAspect.setCheckable(True)
        self.actionAspect.setObjectName("actionAspect")
        self.actionDTM = QtGui.QAction(parent=MainForm)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/icons/triangles2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionDTM.setIcon(icon2)
        self.actionDTM.setObjectName("actionDTM")
        self.actionContour_lines = QtGui.QAction(parent=MainForm)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/icons/contours2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionContour_lines.setIcon(icon3)
        self.actionContour_lines.setObjectName("actionContour_lines")
        self.actionAnalyzeSlope = QtGui.QAction(parent=MainForm)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/icons/slope2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionAnalyzeSlope.setIcon(icon4)
        self.actionAnalyzeSlope.setObjectName("actionAnalyzeSlope")
        self.actionAnalyzeAspect = QtGui.QAction(parent=MainForm)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("images/icons/orientation2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionAnalyzeAspect.setIcon(icon5)
        self.actionAnalyzeAspect.setObjectName("actionAnalyzeAspect")
        self.actionClear_data = QtGui.QAction(parent=MainForm)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("images/icons/clear.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionClear_data.setIcon(icon6)
        self.actionClear_data.setObjectName("actionClear_data")
        self.actionClear_all = QtGui.QAction(parent=MainForm)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("images/icons/clear_all.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionClear_all.setIcon(icon7)
        self.actionClear_all.setObjectName("actionClear_all")
        self.actionParameters = QtGui.QAction(parent=MainForm)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("images/icons/settings.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionParameters.setIcon(icon8)
        self.actionParameters.setObjectName("actionParameters")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuView.addAction(self.actionPoints)
        self.menuView.addAction(self.actionContourLines)
        self.menuView.addAction(self.actionDT)
        self.menuView.addAction(self.actionSlope)
        self.menuView.addAction(self.actionAspect)
        self.menuAnalysis.addAction(self.actionDTM)
        self.menuAnalysis.addSeparator()
        self.menuAnalysis.addAction(self.actionContour_lines)
        self.menuAnalysis.addAction(self.actionAnalyzeSlope)
        self.menuAnalysis.addAction(self.actionAnalyzeAspect)
        self.menuClear.addAction(self.actionClear_data)
        self.menuClear.addSeparator()
        self.menuClear.addAction(self.actionClear_all)
        self.menuSettings.addAction(self.actionParameters)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuAnalysis.menuAction())
        self.menubar.addAction(self.menuClear.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.toolBar.addAction(self.actionOpen)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionDTM)
        self.toolBar.addAction(self.actionContour_lines)
        self.toolBar.addAction(self.actionAnalyzeSlope)
        self.toolBar.addAction(self.actionAnalyzeAspect)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionParameters)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionClear_data)
        self.toolBar.addAction(self.actionClear_all)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionExit)
        
        #Check all items
        self.actionPoints.setChecked(True)
        self.actionDT.setChecked(True)
        self.actionContourLines.setChecked(True)
        self.actionSlope.setChecked(True)
        self.actionAspect.setChecked(True)
        
        #Create dialog
        self.dialog = QtWidgets.QDialog()
        self.ui_dialog = Ui_Settings()
        self.ui_dialog.setupUi(self.dialog)
        
        #User-defined slots
        self.actionDTM.triggered.connect(self.dtClick)
        self.actionContour_lines.triggered.connect(self.contourLinesClick)
        self.actionParameters.triggered.connect(self.settingsClick)
        self.actionAnalyzeSlope.triggered.connect(self.analyzeSlopeClick)
        self.actionAnalyzeAspect.triggered.connect(self.analyzeAspectClick)
        self.actionOpen.triggered.connect(self.openFile)
        self.actionClear_data.triggered.connect(self.clearData)
        self.actionClear_all.triggered.connect(self.clearAll)
        self.actionExit.triggered.connect(MainForm.close)
        
        self.actionPoints.changed.connect(self.pointsChanged)
        self.actionDT.changed.connect(self.DTChanged)
        self.actionContourLines.changed.connect(self.contourLinesChanged)
        self.actionSlope.changed.connect(self.slopeChanged)
        self.actionAspect.changed.connect(self.aspectChanged)

        self.retranslateUi(MainForm)
        QtCore.QMetaObject.connectSlotsByName(MainForm)
        
        
    def dtClick(self):
        """Perform Delaunay Triangulation"""
        points = self.Canvas.getPoints()
        if not points:
            self.statusbar.showMessage("No points available for triangulation", 5000)
            return
            
        a = Algorithms()
        dt = a.delaunayTriangulation(points)
        
        self.Canvas.setDT(dt)
        self.Canvas.repaint()
        self.statusbar.showMessage(f"Computed DT with {len(dt)} edges", 5000)
        
        
    def contourLinesClick(self):
         """Compute contour lines"""
         dt = self.Canvas.getDT()
         if not dt:
             self.statusbar.showMessage("Create DT first!", 5000)
             return
             
         # Clear existing contour lines before generating new ones
         self.Canvas.setContourLines([])
         
         a = Algorithms()
         contour_lines = a.createContourLines(dt, self.zmin, self.zmax, self.dz)
         
         self.Canvas.setContourLines(contour_lines)
         self.Canvas.repaint()
         self.statusbar.showMessage(f"Generated {len(contour_lines)} contour lines", 5000)
         
    
    def settingsClick(self):
        """Show and apply settings"""
        self.dialog.exec()
        self.zmin = self.ui_dialog.getZmin()
        self.zmax = self.ui_dialog.getZmax()
        self.dz = self.ui_dialog.getdZ()
        self.statusbar.showMessage(f"Updated parameters: zmin={self.zmin}, zmax={self.zmax}, dz={self.dz}", 5000)
        
    
    def analyzeSlopeClick(self):
        """Analyze slope angles"""
        dt = self.Canvas.getDT()
        if not dt:
            self.statusbar.showMessage("Create DT first!", 5000)
            return
            
        a = Algorithms()
        triangles = self.Canvas.getTriangles()
        a.analyzeDTMSlope(dt, triangles)
        
        self.Canvas.setTriangles(triangles)
        self.Canvas.repaint()
        self.statusbar.showMessage("Slope analysis completed", 5000)

    def analyzeAspectClick(self):
        """Analyze aspect directions"""
        dt = self.Canvas.getDT()
        if not dt:
            self.statusbar.showMessage("Create DT first!", 5000)
            return
            
        a = Algorithms()
        scale = self.ui_dialog.getScale()
        xmin = self.ui_dialog.getXmin()
        ymin = self.ui_dialog.getYmin()
        
        north, south, west, east = a.analyzeAspect(dt, scale, xmin, ymin)
        self.Canvas.setAspectData(north, south, west, east)
        self.Canvas.repaint()
        self.statusbar.showMessage("Aspect analysis completed", 5000)
        
    def pointsChanged(self):
        self.Canvas.setViewPoints(self.actionPoints.isChecked())
        self.Canvas.repaint()
        
    def DTChanged(self):
        self.Canvas.setViewDT(self.actionDT.isChecked())
        self.Canvas.repaint()
        
    def contourLinesChanged(self):
        self.Canvas.setViewContourLines(self.actionContourLines.isChecked())
        self.Canvas.repaint()
        
    def slopeChanged(self):
        self.Canvas.setViewSlope(self.actionSlope.isChecked())
        self.Canvas.repaint()    

    def aspectChanged(self):
        self.Canvas.setViewAspect(self.actionAspect.isChecked())
        self.Canvas.repaint()
        
    def openFile(self):
        """Open point cloud file and load QPoint3D data"""
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(
            None, "Open Point Cloud File", "", "Supported Files (*.txt *.las *.laz);;Text Files (*.txt);;LAS Files (*.las *.laz)")
        
        if not filename:
            return

        # Handle LAS/LAZ files
        if filename.lower().endswith(('.laz', '.las')):
            try:
                with laspy.open(filename, laz_backend=LazBackend.Lazrs) as f:
                    las = f.read()
                    scale = las.header.scales
                    offset = las.header.offsets
                    xs = -(las.X) * scale[0] + offset[0]
                    ys = -(las.Y) * scale[1] + offset[1]
                    zs = las.Z * scale[2] + offset[2]
                    
                    # Coordinate validation
                    if max(xs) > 1e6 or max(ys) > 1e6:
                        self.statusbar.showMessage("Warning: Coordinates exceed expected range", 5000)
                        
                    points = [QPoint3DF(x, y, z) for x, y, z in zip(xs, ys, zs)]
                    
            except Exception as e:
                self.statusbar.showMessage(f"Error reading file: {str(e)}", 5000)
                return
                
        # Handle TXT files
        else:
            points = []
            try:
                with open(filename, "r") as file:
                    for line_number, line in enumerate(file, 1):
                        line = line.strip().replace(',', '.')
                        parts = line.split()
                        if len(parts) < 3:
                            self.statusbar.showMessage(f"Line {line_number}: Not enough values", 5000)
                            continue
                            
                        try:
                            x, y, z = map(float, parts[:3])
                            points.append(QPoint3DF(x, y, z))
                        except ValueError as e:
                            self.statusbar.showMessage(f"Line {line_number}: Invalid data", 5000)
            except Exception as e:
                self.statusbar.showMessage(f"File error: {str(e)}", 5000)
                return
        
        if points:
            self.Canvas.setPoints(points)
            self.Canvas.setViewPoints(True)
            self.Canvas.calculateTransform()
            self.Canvas.repaint()
            self.actionPoints.setChecked(True)
            self.statusbar.showMessage(f"Loaded {len(points)} points from {filename}", 5000)
        else:
            self.statusbar.showMessage("No valid points found in file", 5000)

    def clearData(self):
        """Clear analyzed data but keep points"""
        self.Canvas.setDT([])
        self.Canvas.setContourLines([])
        self.Canvas.setTriangles([])
        self.Canvas.setAspectData([], [], [], [])
        self.Canvas.repaint()
        self.statusbar.showMessage("Cleared analysis data", 5000)

    def clearAll(self):
        """Clear all data including points"""
        self.Canvas.setPoints([])
        self.Canvas.setDT([])
        self.Canvas.setContourLines([])
        self.Canvas.setTriangles([])
        self.Canvas.setAspectData([], [], [], [])
        self.Canvas.repaint()
        self.statusbar.showMessage("Cleared all data", 5000)

    def retranslateUi(self, MainForm):
        _translate = QtCore.QCoreApplication.translate
        MainForm.setWindowTitle(_translate("MainForm", "DTM analysis"))
        self.menuFile.setTitle(_translate("MainForm", "File"))
        self.menuView.setTitle(_translate("MainForm", "View"))
        self.menuAnalysis.setTitle(_translate("MainForm", "Analysis"))
        self.menuClear.setTitle(_translate("MainForm", "Clear"))
        self.menuSettings.setTitle(_translate("MainForm", "Settings"))
        self.toolBar.setWindowTitle(_translate("MainForm", "toolBar"))
        self.actionOpen.setText(_translate("MainForm", "Open"))
        self.actionOpen.setToolTip(_translate("MainForm", "Open file"))
        self.actionExit.setText(_translate("MainForm", "Exit"))
        self.actionExit.setToolTip(_translate("MainForm", "Close application"))
        self.actionPoints.setText(_translate("MainForm", "Points"))
        self.actionDT.setText(_translate("MainForm", "DT"))
        self.actionSlope.setText(_translate("MainForm", "Slope"))
        self.actionAspect.setText(_translate("MainForm", "Aspect"))
        self.actionDTM.setText(_translate("MainForm", "DTM"))
        self.actionDTM.setToolTip(_translate("MainForm", "Create DTM"))
        self.actionContour_lines.setText(_translate("MainForm", "Contour lines"))
        self.actionContour_lines.setToolTip(_translate("MainForm", "Create contour lines"))
        self.actionAnalyzeSlope.setText(_translate("MainForm", "Analyze Slope"))
        self.actionAnalyzeSlope.setToolTip(_translate("MainForm", "Analyze DTM Slope"))
        self.actionAnalyzeAspect.setText(_translate("MainForm", "Analyze Aspect"))
        self.actionClear_data.setText(_translate("MainForm", "Clear data"))
        self.actionClear_all.setText(_translate("MainForm", "Clear all"))
        self.actionParameters.setText(_translate("MainForm", "Parameters"))
        self.actionParameters.setToolTip(_translate("MainForm", "Setting parameters"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainForm = QtWidgets.QMainWindow()
    ui = Ui_MainForm()
    ui.setupUi(MainForm)
    MainForm.show()
    sys.exit(app.exec())
